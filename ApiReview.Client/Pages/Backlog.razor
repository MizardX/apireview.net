@page "/backlog"
@inject IJSRuntime JSRuntime;
@inject ApiReviewService ApiReviewService;
@attribute [Authorize]

@if (_issues == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter" @bind="_filter" @bind:event="oninput">
    </div>
    <div class="gh-issue-header">
        <div class="row">
            <div class="col align-self-center">
                <p class="text-muted m-0">
                    @{
                        var numberOfOrgs = _issues.Select(i => i.Owner).Distinct().Count();
                        var numberOfRepos = _issues.Select(i => i.Repo).Distinct().Count();
                        var visibleIssues = _issues.Count(IsVisible);
                    }

                    @if (visibleIssues == _issues.Count)
                    {
                        <text>
                            @_issues.Count issues across @numberOfOrgs orgs and @numberOfRepos repos
                        </text>
                    }
                    else
                    {
                        <text>
                            @visibleIssues of @_issues.Count issues across @numberOfOrgs orgs and @numberOfRepos repos
                        </text>
                    }
                </p>
            </div>
        </div>
    </div>
    <div class="gh-issue-list">

        @foreach (var issue in _issues)
        {
            if (!IsVisible(issue))
                continue;

            <div class="gh-issue-cell">
                <a class="gh-issue-title" href="@issue.Url">@issue.Title</a>
                <span>
                    @foreach (var label in issue.Labels)
                    {
                        <span class="gh-label"
                              style="background: @("#" + label.BackgroundColor); color: @label.ForegroundColor">@label.Name</span>
                        }
                </span>
                <div class="gh-details-cell">
                    @issue.DetailText
                </div>
            </div>
        }
    </div>
}

@code {

    private IReadOnlyList<ApiReviewIssue> _issues;
    private string _filter;

    protected override async Task OnInitializedAsync()
    {
        _issues = await ApiReviewService.GetIssuesAsync();
    }

    private async Task RefreshAsync()
    {
        await ApiReviewService.RefreshAsync();
        _issues = await ApiReviewService.GetIssuesAsync();
    }

    private bool IsVisible(ApiReviewIssue issue)
    {
        if (string.IsNullOrEmpty(_filter))
            return true;

        if (issue.Title.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (issue.IdFull.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (issue.Author.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;

        foreach (var label in issue.Labels)
        {
            if (label.Name.Contains(_filter, StringComparison.OrdinalIgnoreCase))
                return true;
        }

        return false;
    }
}
