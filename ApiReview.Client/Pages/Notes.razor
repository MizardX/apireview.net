@page "/notes"
@using System.Threading;
@attribute [Authorize(Roles = ApiReviewConstants.ApiApproverRole)]
@inject NotesService NotesService

<div class="form-group row">
    <div class="col-sm-2">
        <label for="inputStartDate">Date</label>
        <input type="date" class="form-control @(DateValidationMessage == null ? "" : "is-invalid")" id="inputStartDate" @bind="Date">
        @if (DateValidationMessage != null)
        {
            <div class="invalid-feedback">
                @DateValidationMessage
            </div>
        }
    </div>
    <div class="col-sm-2">
        <label for="inputStartDateTime">Start Time</label>
        <input type="time" placeholder="Start" class="form-control @(StartValidationMessage == null ? "" : "is-invalid")" id="inputStartTime" @bind="Start">
        @if (StartValidationMessage != null)
        {
            <div class="invalid-feedback">
                @StartValidationMessage
            </div>
        }
    </div>
    <div class="col-sm-2">
        <label for="inputEndTime">End Time</label>
        <input type="time" placeholder="End" class="form-control @(EndValidationMessage == null ? "" : "is-invalid")" id="inputEndTime" @bind="End">
        @if (EndValidationMessage != null)
        {
            <div class="invalid-feedback">
                @EndValidationMessage
            </div>
        }
    </div>
</div>
<div class="form-group row">
    <div class="col-sm-10">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="includeVideo" @bind="IncludeVideo">
            <label class="form-check-label" for="includeVideo">
                Include video
            </label>
        </div>
    </div>
</div>
<div class="form-group row">
    <div class="col-sm-10">
        <button class="btn btn-secondary" disabled="@(!CanSearch)" @onclick="FindIssuesAsync">Find issues</button>
    </div>
</div>

@if (Videos.Any())
{
    <div class="mb-3 d-flex flex-row flex-wrap">
        @foreach (var video in Videos)
        {
            <div class="p-2 @(SelectedVideo == video ? "yt-video-selected" : null)" @onclick="@(e => SelectVideoAsync(video))">
                <div class="yt-video">
                    <div><img src="@video.ThumbnailUrl" /></div>
                    <a class="mt-2 yt-video-title" href="@video.Url">@video.Title</a>
                    <div class="text-muted text-sm-left">
                        @video.StartDateTime.FormatAge() at @video.StartDateTime.ToString("h tt")
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (Summary != null && Summary.Items.Count == 0)
{
    <div class="alert alert-secondary">No issues found.</div>
}
else if (Summary != null && Summary.Items.Any())
{
    <div class="gh-issue-list">
        @foreach (var item in Summary.Items)
        {
            <div class="gh-issue-cell">
                <a class="gh-issue-title" href="@item.Feedback.Issue.Url">@item.Feedback.Issue.Title</a>
                <span>
                    @foreach (var label in item.Feedback.Issue.Labels)
                    {
                        <span class="gh-label"
                              style="background: @("#" + label.BackgroundColor); color: @label.ForegroundColor">@label.Name</span>
                        }
                </span>
                <div class="gh-details-cell">
                    <strong><a href="@item.Feedback.FeedbackUrl">@item.Feedback.Decision</a></strong>
                    @if (item.VideoTimeCodeUrl != null)
                    {
                        <text>|</text>
                        <strong><a href="@item.VideoTimeCodeUrl">Video</a></strong>
                    }
                    @item.Feedback.Issue.DetailText
                </div>
            </div>
        }
    </div>

    @if (PublicationResult == null)
    {
        if (!IsLoading)
        {
            <button class="btn btn-primary mb-4" @onclick="PublishNotesAsync">Publish notes</button>
        }
    }
    else
    {
        if (PublicationResult.Success)
        {
            <div class="mt-3 mb-4 alert alert-success">Notes published <a href="@PublicationResult.Url">here</a>.</div>
        }
        else
        {
            <div class="mt-3 mb-4 alert alert-danger">There was a problem publishing the notes.</div>
        }
    }
}

@if (IsLoading)
{
    <div class="ml-1 mt-2 mb-4">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

@code
{
    private CancellationTokenSource _cts;
    private DateTimeOffset _start;
    private DateTimeOffset _end;

    private DateTimeOffset Date
    {
        get => _start;
        set
        {
            _start = value.Date.Add(_start.TimeOfDay);
            _end = value.Date.Add(_end.TimeOfDay);
            UpdateValidation();
        }
    }

    private DateTimeOffset Start
    {
        get => _start;
        set
        {
            _start = _start.Date.Add(value.TimeOfDay);
            UpdateValidation();
        }
    }

    private DateTimeOffset End
    {
        get => _end;
        set
        {
            _end = _end.Date.Add(value.TimeOfDay);
            UpdateValidation();
        }
    }

    private string DateValidationMessage { get; set; }
    private string StartValidationMessage { get; set; }
    private string EndValidationMessage { get; set; }
    private bool HasValidationErrors => DateValidationMessage != null ||
                                        StartValidationMessage != null ||
                                        EndValidationMessage != null;
    private bool CanSearch => !HasValidationErrors && !IsLoading;

    private bool IncludeVideo { get; set; }

    private IReadOnlyList<ApiReviewVideo> Videos { get; set; } = Array.Empty<ApiReviewVideo>();
    private ApiReviewVideo SelectedVideo { get; set; }

    private bool IsLoading { get; set; }
    private ApiReviewSummary Summary { get; set; }

    private ApiReviewPublicationResult PublicationResult { get; set; }

    protected override void OnInitialized()
    {
        _start = DateTime.Now.Date;
        _end = _start.AddHours(23).AddMinutes(59);
        IncludeVideo = true;
    }

    private void UpdateValidation()
    {
        if (Start.Date > DateTimeOffset.Now.Date)
        {
            DateValidationMessage = "Date cannot be in the future";
            StartValidationMessage = null;
        }
        else
        {
            DateValidationMessage = null;

            if (Start > DateTimeOffset.Now)
            {
                StartValidationMessage = "Start cannot be in the future";
            }
            else
            {
                StartValidationMessage = null;
            }
        }

        if (End <= Start)
        {
            EndValidationMessage = "End Time must be after Start Time";
        }
        else
        {
            EndValidationMessage = null;
        }
    }

    private async Task FindIssuesAsync()
    {
        IsLoading = true;
        Videos = Array.Empty<ApiReviewVideo>();
        SelectedVideo = null;
        Summary = null;
        PublicationResult = null;
        StateHasChanged();

        if (_cts != null)
            _cts.Cancel();

        _cts = new CancellationTokenSource();

        var token = _cts.Token;

        IReadOnlyList<ApiReviewVideo> videos = Array.Empty<ApiReviewVideo>();

        if (IncludeVideo)
        {
            videos = await NotesService.GetVideos(Start, End);

            if (token.IsCancellationRequested)
                return;
        }

        Videos = videos;
        SelectedVideo = videos.FirstOrDefault();
        StateHasChanged();

        ApiReviewSummary summary;

        if (SelectedVideo != null)
            summary = await NotesService.IssuesForVideo(SelectedVideo.Id);
        else
            summary = await NotesService.IssuesForRange(Start, End);

        if (token.IsCancellationRequested)
            return;

        Summary = summary;
        IsLoading = false;
    }

    private async Task SelectVideoAsync(ApiReviewVideo video)
    {
        if (video == SelectedVideo)
            return;

        SelectedVideo = video;
        Summary = null;
        PublicationResult = null;
        IsLoading = true;
        StateHasChanged();

        if (_cts != null)
            _cts.Cancel();

        _cts = new CancellationTokenSource();

        var token = _cts.Token;

        var summary = await NotesService.IssuesForVideo(video.Id);
        if (token.IsCancellationRequested)
            return;

        Summary = summary;
        IsLoading = false;
    }

    private async Task PublishNotesAsync()
    {
        IsLoading = true;

        PublicationResult = await NotesService.PublishNotesAsync(Summary);

        IsLoading = false;
    }
}